/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module2) {
    "use strict";
    module2.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module2) {
    module2.exports = {
      "version": "0.24.0"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module2) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module2.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    module2.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.Cancel = require_Cancel();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.VERSION = require_data().version;
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module2.exports = axios2;
    module2.exports.default = axios2;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// src/main.ts
__export(exports, {
  default: () => LinkMuse
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/settings.ts
var DEFAULT_SETTINGS = {
  openaiApiKey: "",
  claudeApiKey: "",
  siliconflowApiKey: "",
  volcApiKey: "",
  defaultModel: "gpt-4",
  defaultProvider: "openai",
  maxNotesToAnalyze: 20,
  saveChainOfThought: true,
  inspirationCount: 3,
  debugMode: false,
  customPromptTemplates: {
    bidirectionalLinks: "\u5206\u6790\u4EE5\u4E0B\u7B14\u8BB0\u5185\u5BB9\uFF0C\u627E\u51FA\u5B83\u4EEC\u4E4B\u95F4\u53EF\u80FD\u5B58\u5728\u7684\u5173\u8054\uFF1A\n{{notes}}",
    inspiration: "\u57FA\u4E8E\u4EE5\u4E0B\u7B14\u8BB0\u5185\u5BB9\uFF0C\u751F\u6210{{count}}\u4E2A\u521B\u65B0\u7684\u7075\u611F\u548C\u60F3\u6CD5\uFF1A\n{{notes}}",
    multimedia: "\u5206\u6790\u4EE5\u4E0B{{type}}\u5185\u5BB9\uFF0C\u63D0\u4F9B\u8BE6\u7EC6\u7684\u7406\u89E3\u548C\u603B\u7ED3\uFF1A\n{{content}}"
  },
  siliconflowModel: "deepseek-ai/DeepSeek-R1-Distill-Qwen-7B",
  volcModel: "deepseek-r1-distill-qwen-32b-250120"
};
var LLM_PROVIDERS = {
  openai: "OpenAI",
  claude: "Claude",
  siliconflow: "\u7845\u57FA\u6D41\u52A8",
  volc: "\u706B\u5C71\u5F15\u64CE"
};

// src/ui/sidebar.ts
var import_obsidian = __toModule(require("obsidian"));
var SidebarView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return "linkmuse-sidebar";
  }
  getDisplayText() {
    return "LinkMuse";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h2", { text: "LinkMuse \u667A\u80FD\u5173\u8054" });
    const mainSection = container.createDiv({ cls: "linkmuse-main-section" });
    const noteSelectionSection = mainSection.createDiv({ cls: "linkmuse-note-selection" });
    noteSelectionSection.createEl("h3", { text: "\u7B14\u8BB0\u9009\u62E9" });
    const llmProviderSection = mainSection.createDiv({ cls: "linkmuse-llm-provider" });
    llmProviderSection.createEl("h4", { text: "LLM\u63D0\u4F9B\u5546" });
    const providerButtonContainer = llmProviderSection.createDiv({ cls: "linkmuse-provider-buttons" });
    const style = document.createElement("style");
    style.textContent = `
      .linkmuse-provider-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 16px;
      }
      .linkmuse-provider-button {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
      }
      .linkmuse-provider-button.is-active {
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
      }
    `;
    document.head.appendChild(style);
    Object.entries(LLM_PROVIDERS).forEach(([key, name]) => {
      const providerButton = new import_obsidian.ButtonComponent(providerButtonContainer).setButtonText(name).setClass("linkmuse-provider-button").onClick(async () => {
        providerButtonContainer.querySelectorAll(".linkmuse-provider-button").forEach((btn) => {
          btn.removeClass("is-active");
        });
        providerButton.buttonEl.addClass("is-active");
        this.plugin.settings.defaultProvider = key;
        await this.plugin.saveSettings();
      });
      if (this.plugin.settings.defaultProvider === key) {
        providerButton.buttonEl.addClass("is-active");
      }
    });
    const actionSection = mainSection.createDiv({ cls: "linkmuse-actions" });
    const linkButton = actionSection.createEl("button", {
      text: "\u751F\u6210\u667A\u80FD\u5173\u8054",
      cls: "mod-cta"
    });
    linkButton.addEventListener("click", () => {
      this.plugin.generateBidirectionalLinks();
    });
    const inspirationButton = actionSection.createEl("button", {
      text: "\u7075\u611F\u8DC3\u8FC1",
      cls: "mod-cta"
    });
    inspirationButton.addEventListener("click", () => {
      this.plugin.generateInspiration();
    });
    const resultsSection = container.createDiv({ cls: "linkmuse-results" });
    resultsSection.createEl("h3", { text: "\u7ED3\u679C" });
    resultsSection.createDiv({ cls: "linkmuse-results-container" });
  }
  async onClose() {
  }
};

// src/services/llm-service.ts
var import_axios = __toModule(require_axios2());
var LLMService = class {
  constructor(settings, app) {
    this.openaiEndpoint = "https://api.openai.com/v1/chat/completions";
    this.claudeEndpoint = "https://api.anthropic.com/v1/messages";
    this.siliconflowEndpoint = "https://api.siliconflow.cn/v1/chat/completions";
    this.volcEngineEndpoint = "https://ark.cn-beijing.volces.com/api/v3/chat/completions";
    this.settings = settings;
    this.app = app;
  }
  async testConnection() {
    try {
      switch (this.settings.defaultProvider) {
        case "openai":
          await this.testOpenAI();
          break;
        case "claude":
          await this.testClaude();
          break;
        case "siliconflow":
          await this.testSiliconFlow();
          break;
        case "volc":
          await this.testVolcEngine();
          break;
        default:
          throw new Error("\u672A\u77E5\u7684LLM\u63D0\u4F9B\u5546");
      }
      return true;
    } catch (error) {
      console.error("API\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25:", error);
      return false;
    }
  }
  async testOpenAI() {
    if (!this.settings.openaiApiKey) {
      throw new Error("\u672A\u914D\u7F6EOpenAI API\u5BC6\u94A5");
    }
    await import_axios.default.post(this.openaiEndpoint, {
      model: this.settings.defaultModel,
      messages: [{ role: "user", content: "Hello" }],
      max_tokens: 5
    }, {
      headers: {
        "Authorization": `Bearer ${this.settings.openaiApiKey}`,
        "Content-Type": "application/json"
      }
    });
    return true;
  }
  async testClaude() {
    if (!this.settings.claudeApiKey) {
      throw new Error("\u672A\u914D\u7F6EClaude API\u5BC6\u94A5");
    }
    await import_axios.default.post(this.claudeEndpoint, {
      model: this.settings.defaultModel,
      messages: [{ role: "user", content: "Hello" }],
      max_tokens: 5
    }, {
      headers: {
        "x-api-key": this.settings.claudeApiKey,
        "Content-Type": "application/json"
      }
    });
    return true;
  }
  async testSiliconFlow() {
    if (!this.settings.siliconflowApiKey) {
      throw new Error("\u672A\u914D\u7F6E\u7845\u57FA\u6D41\u52A8API\u5BC6\u94A5");
    }
    await import_axios.default.post(this.siliconflowEndpoint, {
      model: this.settings.siliconflowModel,
      messages: [{ role: "user", content: "Hello" }],
      max_tokens: 5
    }, {
      headers: {
        "Authorization": `Bearer ${this.settings.siliconflowApiKey}`,
        "Content-Type": "application/json"
      }
    });
    return true;
  }
  async testVolcEngine() {
    if (!this.settings.volcApiKey) {
      throw new Error("\u672A\u914D\u7F6E\u706B\u5C71\u5F15\u64CEAPI\u5BC6\u94A5");
    }
    const timestamp = Math.floor(Date.now() / 1e3);
    const requestId = `${timestamp}-${Math.random().toString(36).substring(2, 15)}`;
    await import_axios.default.post(this.volcEngineEndpoint, {
      model: this.settings.volcModel,
      messages: [{ role: "user", content: "Hello" }],
      max_tokens: 5
    }, {
      headers: {
        "Authorization": `Bearer ${this.settings.volcApiKey}`,
        "Content-Type": "application/json",
        "X-Request-Id": requestId
      }
    });
    return true;
  }
  async generateBidirectionalLinks(notes) {
    const prompt = this.settings.customPromptTemplates.bidirectionalLinks.replace("{{notes}}", notes.join("\n---\n"));
    return await this.sendRequest(prompt);
  }
  async generateInspiration(notes) {
    const prompt = this.settings.customPromptTemplates.inspiration.replace("{{notes}}", notes.join("\n---\n")).replace("{{count}}", this.settings.inspirationCount.toString());
    return await this.sendRequest(prompt);
  }
  async analyzeMultimedia(type, content) {
    const prompt = this.settings.customPromptTemplates.multimedia.replace("{{type}}", type).replace("{{content}}", content);
    return await this.sendRequest(prompt);
  }
  async sendRequest(prompt) {
    try {
      switch (this.settings.defaultProvider) {
        case "openai":
          return await this.sendOpenAIRequest(prompt);
        case "claude":
          return await this.sendClaudeRequest(prompt);
        case "siliconflow":
          return await this.sendSiliconFlowRequest(prompt);
        case "volc":
          return await this.sendVolcEngineRequest(prompt);
        default:
          throw new Error("\u4E0D\u652F\u6301\u7684LLM\u63D0\u4F9B\u5546");
      }
    } catch (error) {
      console.error("API\u8BF7\u6C42\u5931\u8D25:", error);
      throw error;
    }
  }
  async sendOpenAIRequest(prompt) {
    const response = await import_axios.default.post(this.openaiEndpoint, {
      model: this.settings.defaultModel,
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7
    }, {
      headers: {
        "Authorization": `Bearer ${this.settings.openaiApiKey}`,
        "Content-Type": "application/json"
      }
    });
    return response.data.choices[0].message.content;
  }
  async sendClaudeRequest(prompt) {
    const response = await import_axios.default.post(this.claudeEndpoint, {
      model: this.settings.defaultModel,
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7
    }, {
      headers: {
        "x-api-key": this.settings.claudeApiKey,
        "Content-Type": "application/json"
      }
    });
    return response.data.content[0].text;
  }
  async sendSiliconFlowRequest(prompt) {
    const response = await import_axios.default.post(this.siliconflowEndpoint, {
      model: this.settings.siliconflowModel,
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7
    }, {
      headers: {
        "Authorization": `Bearer ${this.settings.siliconflowApiKey}`,
        "Content-Type": "application/json"
      }
    });
    return response.data.choices[0].message.content;
  }
  async sendVolcEngineRequest(prompt) {
    const timestamp = Math.floor(Date.now() / 1e3);
    const requestId = `${timestamp}-${Math.random().toString(36).substring(2, 15)}`;
    const response = await this.app.request({
      url: this.volcEngineEndpoint,
      method: "POST",
      body: JSON.stringify({
        model: this.settings.volcModel,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7
      }),
      headers: {
        "Authorization": `Bearer ${this.settings.volcApiKey}`,
        "Content-Type": "application/json",
        "X-Request-Id": requestId
      }
    });
    const responseData = JSON.parse(response);
    return responseData.choices[0].message.content;
  }
  async sendPrompt(prompt) {
    try {
      switch (this.settings.defaultProvider) {
        case "openai":
          return await this.sendOpenAIPrompt(prompt);
        case "claude":
          return await this.sendClaudePrompt(prompt);
        case "siliconflow":
          return await this.sendSiliconFlowPrompt(prompt);
        case "volc":
          return await this.sendVolcPrompt(prompt);
        default:
          throw new Error("\u672A\u77E5\u7684LLM\u63D0\u4F9B\u5546");
      }
    } catch (error) {
      console.error("LLM API\u8C03\u7528\u5931\u8D25:", error);
      throw error;
    }
  }
  async sendSiliconFlowPrompt(prompt) {
    if (!this.settings.siliconflowApiKey) {
      throw new Error("\u672A\u914D\u7F6E\u7845\u57FA\u6D41\u52A8API\u5BC6\u94A5");
    }
    const response = await import_axios.default.post(this.siliconflowEndpoint, {
      model: this.settings.siliconflowModel,
      messages: [{ role: "user", content: prompt }],
      temperature: 0.3,
      max_tokens: 1e3
    }, {
      headers: {
        "Authorization": `Bearer ${this.settings.siliconflowApiKey}`,
        "Content-Type": "application/json"
      }
    });
    return response.data.choices[0].message.content;
  }
  async sendVolcPrompt(prompt) {
    if (!this.settings.volcApiKey) {
      throw new Error("\u672A\u914D\u7F6E\u706B\u5C71\u5F15\u64CEAPI\u5BC6\u94A5");
    }
    const response = await import_axios.default.post(this.volcEngineEndpoint, {
      model: this.settings.volcModel,
      messages: [{ role: "user", content: prompt }],
      temperature: 0.3,
      max_tokens: 1e3
    }, {
      headers: {
        "Authorization": `Bearer ${this.settings.volcApiKey}`,
        "Content-Type": "application/json"
      }
    });
    return response.data.choices[0].message.content;
  }
  async analyzeNoteRelevance(content1, content2) {
    const prompt = `\u8BF7\u5206\u6790\u4EE5\u4E0B\u4E24\u4E2A\u7B14\u8BB0\u4E4B\u95F4\u7684\u5173\u8054\u6027\uFF1A

\u7B14\u8BB01\uFF1A
${content1}

\u7B14\u8BB02\uFF1A
${content2}

\u8BF7\u63D0\u4F9B\uFF1A
1. \u5173\u8054\u6027\u89E3\u91CA\uFF08\u7B80\u660E\u627C\u8981\u8BF4\u660E\u4E24\u4E2A\u7B14\u8BB0\u4E4B\u95F4\u7684\u5173\u8054\uFF0C\u5FC5\u987B\u4F7F\u7528\u7B14\u8BB0\u7684\u5B9E\u9645\u4E3B\u9898\u540D\u79F0\uFF0C\u800C\u4E0D\u662F\u4F7F\u7528"\u5185\u5BB91"/"\u5185\u5BB92
2. \u5173\u8054\u7A0B\u5EA6\u8BC4\u5206\uFF080-1\u4E4B\u95F4\u7684\u6570\u503C\uFF0C\u5176\u4E2D0\u8868\u793A\u5B8C\u5168\u65E0\u5173\uFF0C1\u8868\u793A\u9AD8\u5EA6\u76F8\u5173\uFF09

\u8BF7\u4EE5JSON\u683C\u5F0F\u8FD4\u56DE\u7ED3\u679C\uFF0C\u683C\u5F0F\u5982\u4E0B\uFF1A
{
  "explanation": "\u5173\u8054\u6027\u89E3\u91CA",
  "relevanceScore": 0.5
}

\u6CE8\u610F\uFF1A\u8BF7\u76F4\u63A5\u8FD4\u56DEJSON\u683C\u5F0F\u7684\u7ED3\u679C\uFF0C\u4E0D\u8981\u5305\u542BMarkdown\u4EE3\u7801\u5757\u6807\u8BB0\u3002`;
    try {
      const response = await this.sendPrompt(prompt);
      const cleanResponse = response.replace(/^```json\n|^```\n|```$/gm, "").trim();
      try {
        const result = JSON.parse(cleanResponse);
        return {
          explanation: result.explanation || "\u65E0\u6CD5\u83B7\u53D6\u5173\u8054\u6027\u89E3\u91CA",
          relevanceScore: parseFloat(result.relevanceScore) || 0
        };
      } catch (parseError) {
        console.error("\u89E3\u6790LLM\u54CD\u5E94\u5931\u8D25:", parseError);
        console.debug("\u6E05\u7406\u540E\u7684\u54CD\u5E94:", cleanResponse);
        const explanationPatterns = [
          /关联性解释[：:]*\s*(.+?)(?=[\n\r]|关联程度|$)/s,
          /分析结果[：:]*\s*(.+?)(?=[\n\r]|关联程度|$)/s,
          /两段内容(.+?)(?=[\n\r]|关联程度|$)/s,
          /(.+?)(?=[\n\r]|关联程度评分|相关度为|相关性为|$)/s
        ];
        const scorePatterns = [
          /关联程度[：:]*\s*(0\.\d+|\d+\.\d+|\d+)/s,
          /相关度[：:]*\s*(0\.\d+|\d+\.\d+|\d+)/s,
          /相关性[：:]*\s*(0\.\d+|\d+\.\d+|\d+)/s,
          /评分[：:]*\s*(0\.\d+|\d+\.\d+|\d+)/s
        ];
        let explanation = "\u65E0\u6CD5\u89E3\u6790\u5173\u8054\u6027\u89E3\u91CA";
        let relevanceScore = 0;
        for (const pattern of explanationPatterns) {
          const match = cleanResponse.match(pattern);
          if (match && match[1]) {
            explanation = match[1].trim();
            break;
          }
        }
        for (const pattern of scorePatterns) {
          const match = cleanResponse.match(pattern);
          if (match && match[1]) {
            const score = parseFloat(match[1]);
            if (!isNaN(score) && score >= 0 && score <= 1) {
              relevanceScore = score;
              break;
            }
          }
        }
        if (relevanceScore > 1) {
          relevanceScore = relevanceScore > 10 ? relevanceScore / 100 : relevanceScore / 10;
        }
        return { explanation, relevanceScore };
      }
    } catch (error) {
      console.error("\u5206\u6790\u7B14\u8BB0\u5173\u8054\u6027\u5931\u8D25:", error);
      return {
        explanation: "API\u8C03\u7528\u5931\u8D25\uFF0C\u65E0\u6CD5\u5206\u6790\u5173\u8054\u6027",
        relevanceScore: 0
      };
    }
  }
};

// src/services/note-link-service.ts
var NoteLinkService = class {
  constructor(app, llmService) {
    this.app = app;
    this.llmService = llmService;
  }
  getExistingLinks(noteContent) {
    const linkRegex = /\[\[([^\]]+)\]\]/g;
    const links = [];
    let match;
    while ((match = linkRegex.exec(noteContent)) !== null) {
      links.push(match[1]);
    }
    return links;
  }
  async analyzePotentialLinks(currentNote, maxNotesToAnalyze) {
    const currentContent = await this.app.vault.read(currentNote);
    const existingLinks = this.getExistingLinks(currentContent);
    const allNotes = this.app.vault.getMarkdownFiles();
    const notesToAnalyze = allNotes.filter((note) => note.path !== currentNote.path && !existingLinks.includes(note.basename)).slice(0, maxNotesToAnalyze);
    const potentialLinks = [];
    for (const note of notesToAnalyze) {
      const noteContent = await this.app.vault.read(note);
      const analysis = await this.analyzeRelevance(currentContent, noteContent);
      if (analysis.relevanceScore > 0) {
        potentialLinks.push({
          noteName: note.basename,
          content: analysis.explanation,
          relevanceScore: analysis.relevanceScore
        });
      }
    }
    return potentialLinks.sort((a, b) => b.relevanceScore - a.relevanceScore);
  }
  async analyzeRelevance(content1, content2) {
    return await this.llmService.analyzeNoteRelevance(content1, content2);
  }
};

// src/ui/header.ts
function setupHeaderLogo(plugin) {
  const titleEl = document.querySelector(".view-header-title");
  if (!titleEl)
    return;
  titleEl.empty();
  const logoContainer = titleEl.createDiv({ cls: "linkmuse-logo" });
  const logoIcon = logoContainer.createDiv({ cls: "linkmuse-logo-icon" });
  logoIcon.innerHTML = `<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
    <path d="M50 10 C70 10, 90 30, 90 50 C90 70, 70 90, 50 90 C30 90, 10 70, 10 50 C10 30, 30 10, 50 10 Z M50 30 C60 30, 70 40, 70 50 C70 60, 60 70, 50 70 C40 70, 30 60, 30 50 C30 40, 40 30, 50 30 Z" />
    <path d="M30 30 L70 70 M30 70 L70 30" />
  </svg>`;
  logoContainer.createSpan({ text: "LinkMuse \u667A\u80FD\u5173\u8054" });
}

// src/main.ts
var LinkMuse = class extends import_obsidian2.Plugin {
  async onload() {
    console.log("\u52A0\u8F7D LinkMuse \u63D2\u4EF6");
    await this.loadSettings();
    this.addSettingTab(new LinkMuseSettingTab(this.app, this));
    this.llmService = new LLMService(this.settings, this.app);
    this.noteLinkService = new NoteLinkService(this.app, this.llmService);
    this.registerView("linkmuse-sidebar", (leaf) => this.sidebarView = new SidebarView(leaf, this));
    this.addRibbonIcon("brain-cog", "LinkMuse", () => {
      this.activateView();
    });
    setupHeaderLogo(this);
    this.addCommands();
  }
  async onunload() {
    console.log("\u5378\u8F7D LinkMuse \u63D2\u4EF6");
    this.app.workspace.detachLeavesOfType("linkmuse-sidebar");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const workspace = this.app.workspace;
    const existingLeaves = workspace.getLeavesOfType("linkmuse-sidebar");
    if (existingLeaves.length) {
      workspace.revealLeaf(existingLeaves[0]);
      return;
    }
    const leaf = workspace.getRightLeaf(false);
    await leaf.setViewState({
      type: "linkmuse-sidebar",
      active: true
    });
    workspace.revealLeaf(leaf);
  }
  addCommands() {
    this.addCommand({
      id: "generate-bidirectional-links",
      name: "\u751F\u6210\u667A\u80FD\u53CC\u5411\u5173\u8054",
      callback: () => this.generateBidirectionalLinks()
    });
    this.addCommand({
      id: "analyze-note-combinations",
      name: "\u5206\u6790\u7B14\u8BB0\u7EC4\u5408\u5173\u8054",
      callback: () => this.analyzeNoteCombinations()
    });
    this.addCommand({
      id: "generate-inspiration",
      name: "\u751F\u6210\u7075\u611F\u8DC3\u8FC1",
      callback: () => this.generateInspiration()
    });
    this.addCommand({
      id: "analyze-multimedia",
      name: "\u5206\u6790\u591A\u5A92\u4F53\u5185\u5BB9",
      callback: () => this.analyzeMultimedia()
    });
  }
  async generateBidirectionalLinks() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!activeView) {
      new import_obsidian2.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A\u7B14\u8BB0");
      return;
    }
    const currentFile = activeView.file;
    if (!currentFile) {
      new import_obsidian2.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u7B14\u8BB0\u6587\u4EF6");
      return;
    }
    try {
      new import_obsidian2.Notice("\u6B63\u5728\u5206\u6790\u7B14\u8BB0\u5173\u8054...");
      const potentialLinks = await this.noteLinkService.analyzePotentialLinks(currentFile, this.settings.maxNotesToAnalyze);
      if (potentialLinks.length === 0) {
        new import_obsidian2.Notice("\u672A\u627E\u5230\u6F5C\u5728\u5173\u8054\u7684\u7B14\u8BB0");
        return;
      }
      let output = "## \u6F5C\u5728\u7684\u7B14\u8BB0\u5173\u8054\n\n";
      potentialLinks.forEach((link) => {
        output += `\u5F53\u524D\u7B14\u8BB0\u548C[[${link.noteName}]]\u6F5C\u5728\u7684\u5173\u8054\uFF1A${link.content}\uFF0C\u5173\u8054\u7A0B\u5EA6\uFF1A${link.relevanceScore}

`;
      });
      const editor = activeView.editor;
      const currentContent = editor.getValue();
      editor.setValue(currentContent + "\n\n" + output);
      new import_obsidian2.Notice(`\u5DF2\u627E\u5230${potentialLinks.length}\u4E2A\u6F5C\u5728\u5173\u8054`);
    } catch (error) {
      console.error("\u751F\u6210\u53CC\u5411\u5173\u8054\u65F6\u51FA\u9519:", error);
      new import_obsidian2.Notice("\u751F\u6210\u5173\u8054\u65F6\u51FA\u9519\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u83B7\u53D6\u8BE6\u7EC6\u4FE1\u606F");
    }
  }
  async analyzeNoteCombinations() {
    new import_obsidian2.Notice("\u6B63\u5728\u5206\u6790\u7B14\u8BB0\u7EC4\u5408\u5173\u8054...");
  }
  async generateInspiration() {
    new import_obsidian2.Notice("\u6B63\u5728\u751F\u6210\u7075\u611F\u8DC3\u8FC1...");
  }
  async analyzeMultimedia() {
    new import_obsidian2.Notice("\u6B63\u5728\u5206\u6790\u591A\u5A92\u4F53\u5185\u5BB9...");
  }
};
var LinkMuseSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "LinkMuse \u8BBE\u7F6E" });
    containerEl.createEl("h3", { text: "API \u914D\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u7845\u57FA\u6D41\u52A8 API \u5BC6\u94A5").setDesc("\u8F93\u5165\u60A8\u7684\u7845\u57FA\u6D41\u52A8 API\u5BC6\u94A5\uFF08\u53EF\u9009\uFF09").addText((text) => text.setPlaceholder("sf-...").setValue(this.plugin.settings.siliconflowApiKey).onChange(async (value) => {
      this.plugin.settings.siliconflowApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u7845\u57FA\u6D41\u52A8\u6A21\u578B").setDesc("\u9009\u62E9\u8981\u4F7F\u7528\u7684\u7845\u57FA\u6D41\u52A8\u6A21\u578B").addDropdown((dropdown) => {
      dropdown.addOption("deepseek-ai/DeepSeek-R1-Distill-Qwen-7B", "DeepSeek-R1-Distill-Qwen-7B").addOption("Qwen/Qwen2-7B-Instruct", "Qwen2-7B-Instruct").addOption("internlm/internlm2_5-7b-chat", "InternLM2-7B-Chat").addOption("THUDM/glm-4-9b-chat", "GLM-4-9B-Chat").setValue(this.plugin.settings.siliconflowModel).onChange(async (value) => {
        this.plugin.settings.siliconflowModel = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("\u6D4B\u8BD5\u7845\u57FA\u6D41\u52A8\u8FDE\u63A5").setDesc("\u6D4B\u8BD5\u7845\u57FA\u6D41\u52A8API\u8FDE\u63A5\u662F\u5426\u6B63\u5E38").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5").onClick(async () => {
      button.setButtonText("\u6D4B\u8BD5\u4E2D...");
      try {
        if (!this.plugin.settings.siliconflowApiKey) {
          new import_obsidian2.Notice("\u8BF7\u5148\u914D\u7F6E\u7845\u57FA\u6D41\u52A8 API \u5BC6\u94A5");
          return;
        }
        const result = await this.plugin.llmService.testSiliconFlow();
        new import_obsidian2.Notice(`\u7845\u57FA\u6D41\u52A8 API\u8FDE\u63A5\u6D4B\u8BD5: ${result ? "\u6210\u529F" : "\u5931\u8D25"}`);
      } catch (error) {
        new import_obsidian2.Notice(`\u7845\u57FA\u6D41\u52A8 API\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25: ${error.message}`);
      } finally {
        button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5");
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u706B\u5C71\u5F15\u64CE API \u5BC6\u94A5").setDesc("\u8F93\u5165\u60A8\u7684\u706B\u5C71\u5F15\u64CE API\u5BC6\u94A5\uFF08\u53EF\u9009\uFF09").addText((text) => text.setPlaceholder("volc-...").setValue(this.plugin.settings.volcApiKey).onChange(async (value) => {
      this.plugin.settings.volcApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u706B\u5C71\u5F15\u64CE\u6A21\u578B").setDesc("\u9009\u62E9\u8981\u4F7F\u7528\u7684\u706B\u5C71\u5F15\u64CE\u6A21\u578B").addDropdown((dropdown) => {
      dropdown.addOption("deepseek-r1-250120", "DeepSeek-R1").addOption("deepseek-v3-241226", "DeepSeek-V3").addOption("deepseek-r1-distill-qwen-32b-250120", "DeepSeek-R1-Distill-Qwen-32B").addOption("deepseek-r1-distill-qwen-7b-250120", "DeepSeek-R1-Distill-Qwen-7B").setValue(this.plugin.settings.volcModel).onChange(async (value) => {
        this.plugin.settings.volcModel = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("\u6D4B\u8BD5\u706B\u5C71\u5F15\u64CE\u8FDE\u63A5").setDesc("\u6D4B\u8BD5\u706B\u5C71\u5F15\u64CEAPI\u8FDE\u63A5\u662F\u5426\u6B63\u5E38").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5").onClick(async () => {
      button.setButtonText("\u6D4B\u8BD5\u4E2D...");
      try {
        if (!this.plugin.settings.volcApiKey) {
          new import_obsidian2.Notice("\u8BF7\u5148\u914D\u7F6E\u706B\u5C71\u5F15\u64CE API \u5BC6\u94A5");
          return;
        }
        const result = await this.plugin.llmService.testVolcEngine();
        new import_obsidian2.Notice(`\u706B\u5C71\u5F15\u64CE API\u8FDE\u63A5\u6D4B\u8BD5: ${result ? "\u6210\u529F" : "\u5931\u8D25"}`);
      } catch (error) {
        new import_obsidian2.Notice(`\u706B\u5C71\u5F15\u64CE API\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25: ${error.message}`);
      } finally {
        button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5");
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u2B50\uFE0F\u9ED8\u8BA4LLM\u63D0\u4F9B\u5546").setDesc("\u9009\u62E9\u9ED8\u8BA4\u4F7F\u7528\u7684AI\u670D\u52A1\u63D0\u4F9B\u5546").addDropdown((dropdown) => {
      dropdown.addOption("siliconflow", "\u7845\u57FA\u6D41\u52A8").addOption("volc", "\u706B\u5C71\u5F15\u64CE").setValue(this.plugin.settings.defaultProvider).onChange(async (value) => {
        this.plugin.settings.defaultProvider = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "\u529F\u80FD\u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u5206\u6790\u7B14\u8BB0\u6570\u91CF").setDesc("\u8BBE\u7F6E\u667A\u80FD\u5173\u8054\u5206\u6790\u65F6\u7684\u6700\u5927\u7B14\u8BB0\u6570\u91CF").addSlider((slider) => slider.setLimits(5, 50, 5).setValue(this.plugin.settings.maxNotesToAnalyze).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.maxNotesToAnalyze = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u4FDD\u5B58\u601D\u7EF4\u94FE").setDesc("\u662F\u5426\u4FDD\u5B58LLM\u5206\u6790\u8FC7\u7A0B\u7684\u601D\u7EF4\u94FE").addToggle((toggle) => toggle.setValue(this.plugin.settings.saveChainOfThought).onChange(async (value) => {
      this.plugin.settings.saveChainOfThought = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u7075\u611F\u751F\u6210\u6570\u91CF").setDesc("\u6BCF\u6B21\u7075\u611F\u8DC3\u8FC1\u751F\u6210\u7684\u7075\u611F\u6570\u91CF").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.inspirationCount).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.inspirationCount = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u9AD8\u7EA7\u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u6D4B\u8BD5API\u8FDE\u63A5").setDesc("\u6D4B\u8BD5\u5F53\u524D\u914D\u7F6E\u7684API\u8FDE\u63A5\u662F\u5426\u6B63\u5E38").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5").onClick(async () => {
      button.setButtonText("\u6D4B\u8BD5\u4E2D...");
      try {
        const result = await this.plugin.llmService.testConnection();
        new import_obsidian2.Notice(`API\u8FDE\u63A5\u6D4B\u8BD5: ${result ? "\u6210\u529F" : "\u5931\u8D25"}`);
      } catch (error) {
        new import_obsidian2.Notice(`API\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25: ${error.message}`);
      } finally {
        button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5");
      }
    }));
  }
};
